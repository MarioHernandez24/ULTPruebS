@page "/proveedor"
@page "/proveedor/{idProveedorEditar:int}"

@using ULTPruebS.Shared;
@using ULTPruebS.Client.Service;

@inject IProveedorService proveedorService;
@inject NavigationManager navegacion;

<PageTitle>@titulo</PageTitle>

<style>
    .card {
        border: 2px solid #68217A; /* Color morado similar al predeterminado */
        border-radius: 8px; /* Bordes redondeados */
        margin-top: 20px;
    }

    .card-header {
        background-color: #68217A; /* Fondo morado para el encabezado */
        color: white; /* Texto blanco en el encabezado */
        padding: 10px;
        border-bottom: 2px solid #4b154a; /* Bordes morados más oscuros */
    }

    .card-body {
        padding: 20px;
    }

    .form-label {
        font-weight: bold; /* Opcional: resaltar las etiquetas */
    }

    .form-control, .form-select {
        border-color: #68217A; /* Bordes morados para inputs y selects */
    }

        .form-control:focus, .form-select:focus {
            box-shadow: 0 0 0 0.2rem rgba(104, 33, 122, 0.25); /* Sombra morada para el foco */
            border-color: #68217A;
        }

    .btn-primary {
        background-color: #68217A; /* Color de fondo morado para el botón */
        border-color: #68217A; /* Borde morado para el botón */
    }

        .btn-primary:hover {
            background-color: #4b154a; /* Color morado más oscuro al pasar el cursor */
            border-color: #4b154a;
        }

    .btn-warning {
        background-color: #f0ad4e; /* Color de fondo para el botón de advertencia */
        border-color: #f0ad4e; /* Borde para el botón de advertencia */
    }

        .btn-warning:hover {
            background-color: #ec971f; /* Color más oscuro al pasar el cursor */
            border-color: #ec971f;
        }

    .alert {
        margin-top: 20px;
    }
</style>

<div class="card mt-4">
    <div class="card-header">
        @titulo
    </div>
    <div class="card-body">
        <EditForm Model="proveedor" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Nombre Completo</label>
                    <InputText class="form-control" @bind-Value="proveedor.NombreProveedor"></InputText>
                    <ValidationMessage For="@(() => proveedor.NombreProveedor)"></ValidationMessage>
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Dirección Empresa</label>
                    <InputText class="form-control" @bind-Value="proveedor.DireccionEmpresa"></InputText>
                    <ValidationMessage For="@(() => proveedor.DireccionEmpresa)"></ValidationMessage>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Teléfono</label>
                    <InputText class="form-control" @bind-Value="proveedor.Telefono"></InputText>
                    <ValidationMessage For="@(() => proveedor.Telefono)"></ValidationMessage>
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Razón Social</label>
                    <InputText class="form-control" @bind-Value="proveedor.RazonSocial"></InputText>
                    <ValidationMessage For="@(() => proveedor.RazonSocial)"></ValidationMessage>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Número RUC</label>
                    <InputText class="form-control" @bind-Value="proveedor.NumeroRuc"></InputText>
                    <ValidationMessage For="@(() => proveedor.NumeroRuc)"></ValidationMessage>
                </div>
            </div>


            <button class="btn btn-primary" type="submit">
                @btnTexto
            </button>

            <button class="btn btn-warning" type="button" @onclick="Volver">
                Volver
            </button>

            @if (!string.IsNullOrEmpty(mensaje))
            {
                <div class="alert alert-success" role="alert">
                    @mensaje
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int idProveedorEditar { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;
    string mensaje = string.Empty; // Variable para el mensaje de éxito o error

    ProveedorDTO proveedor = new ProveedorDTO();

    protected override async Task OnInitializedAsync()
    {
        if (idProveedorEditar != 0)
        {
            proveedor = await proveedorService.Buscar(idProveedorEditar);
            btnTexto = "Actualizar Proveedor";
            titulo = "Editar Proveedor";
        }
        else
        {
            proveedor = new ProveedorDTO
                {
                    NombreProveedor = "",
                    DireccionEmpresa = "",
                    Telefono = "",
                    RazonSocial = "",
                    NumeroRuc = ""
                };
            btnTexto = "Guardar Proveedor";
            titulo = "Nuevo Proveedor";
        }
    }

    private async Task OnValidSubmit()
    {
        int idDevuelto = 0;
        if (idProveedorEditar == 0)
        {
            idDevuelto = await proveedorService.Guardar(proveedor);
            mensaje = "Proveedor guardado exitosamente.";
        }
        else
        {
            idDevuelto = await proveedorService.Editar(proveedor);
            mensaje = "Proveedor actualizado exitosamente.";
        }

        if (idDevuelto != 0)
        {
            // Muestra el mensaje y actualiza la lista en la vista principal
            navegacion.NavigateTo("/proveedores");  // Redirige a la lista de proveedores
        }
    }

    private void Volver()
    {
        navegacion.NavigateTo("/proveedores");  // Redirige a la vista principal
    }
}
